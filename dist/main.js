(()=>{"use strict";var e={572:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captchaLoader=void 0;const a=r(577);t.captchaLoader=class{_defaultScriptLoadingOptions={isAsync:!0,isDeferred:!0,appendedTo:"head",maxRetries:3,retryInterval:100,id:"captchaLoader"};async loadAsync(e,t,r){try{const t=new a.ScriptLoader,o=`https://www.google.com/recaptcha/api.js?render=${e}`;r={...this._defaultScriptLoadingOptions,...r},await t.loadScript(o,r)}catch(e){const r=e instanceof Error?e.message:"try again later";console.error("An error occurred while loading captcha."),await t.invokeMethodAsync("OnCaptchaError",r)}}async executeAsync(e,t,r){try{const a=await grecaptcha.execute(t,{action:r||"homepage"});await e.invokeMethodAsync("OnCaptchaExecuted",a)}catch(t){const r=t instanceof Error?t.message:"try again later";console.error("An error occurred while executing captcha."),await e.invokeMethodAsync("OnCaptchaError",r)}}async renderAsync(e,t,r){const a={sitekey:e,theme:r?.theme||"dark",size:r?.size||"compact",tabindex:r?.tabindex||0,badge:r?.badge||"bottomright",callback:async e=>{await t.invokeMethodAsync("OnCaptchaResolved",e)},"expired-callback":async()=>{await t.invokeMethodAsync("OnCaptchaExpired")},"error-callback":async()=>{await t.invokeMethodAsync("OnCaptchaError")}};let o=0;grecaptcha.ready((()=>{const e=r?.container||"recaptcha_container";o=grecaptcha.render(e,a)})),await t.invokeMethodAsync("OnCaptchaRendered",o)}}},577:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScriptLoader=void 0,t.ScriptLoader=class{_loadedScripts=new Set;_targetElement;constructor(){this._targetElement=document.head}async loadScript(e,t={}){const r=t.maxRetries||3,a=t.retryInterval||25;if(this.isScriptLoaded(e,t.id))return void this.logOutResult("Script Already Loaded");let o=0;for(;o<=r;)try{return void await this.loadScriptAttempt(e,t)}catch(e){if(o>=r)throw this.logOutError("Script Failed To Load after retries"),e;o++,this.logOutError(`Script Failed To Load. Retrying... (${o}/${r})`),await new Promise((e=>setTimeout(e,a)))}}async loadScriptAttempt(e,t){return new Promise(((r,a)=>{const o=document.createElement("script");o.src=e,o.onload=()=>{this._loadedScripts.add(e+(t.id||"")),this.logOutResult("Script Loaded successfully"),r()},o.onerror=()=>{a(new Error("Script failed to load"))},this.setScriptAttributes(o,t),this.getTargetElement(t.appendedTo).appendChild(o)}))}setScriptAttributes(e,t){e.type="text/javascript",e.defer=t.isDeferred||!1,e.async=t.isAsync||!1,e.id=t.id||""}getTargetElement(e){return"head"===e?this._targetElement:document.body}isScriptLoaded(e,t){const r=e+(t||"");return this._loadedScripts.has(r)}logOutResult(e){console.info(`[ScriptLoader]: ${e}`)}logOutError(e){console.error(`[ScriptLoader]: ${e}`)}}}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var c=t[a]={exports:{}};return e[a](c,c.exports,r),c.exports}(()=>{const e=r(572),t=r(577);window.scriptLoader=new t.ScriptLoader,window.captchaLoader=new e.captchaLoader})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,